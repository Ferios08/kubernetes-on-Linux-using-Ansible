- hosts: kubernetes-master-node
  vars_files:
  - ../env_variables
  
  tasks:
  - name: Installing Ingress Nginx
    shell: kubectl apply -f {{INGRESS_URL}}
    environment: "{{ proxy_env }}"
    ignore_errors: yes

  - name: Patching Ingress deployment
    shell: kubectl patch deployment ingress-nginx-controller -n ingress-nginx --patch '{"spec":{"template":{"spec":{"hostNetwork":true}}}}'
    args:
      executable: /bin/bash
    register: result
    retries: 5
    delay: 20
    until: result.rc == 0
    ignore_errors: yes

  - name: Installing Cert-manager
    shell: |
     kubectl create namespace cert-manager
     kubectl apply -f {{CERTMANAGER_URL}}
    environment: "{{ proxy_env }}"
    ignore_errors: yes

  - name: Creating Let's encrypt manager Yaml setup
    file:
      path: $HOME/letsencrypt.yaml
      state: touch

  - name: Setting up Let's encrypt manager Yaml file
    blockinfile:
      path: $HOME/letsencrypt.yaml
      block: |
        apiVersion: cert-manager.io/v1alpha2
        kind: ClusterIssuer
        metadata:
          name: letsencrypt
          namespace: cert-manager
        spec:
          acme:
            server: https://acme-v02.api.letsencrypt.org/directory
            email: "{{LetEncrypytEmail}}"
            privateKeySecretRef:
              name: letsencrypt
            solvers:
            - http01:
                ingress:
                  class: nginx


  - name: Applying Let's encrypt manager Yaml setup
    shell: kubectl apply -f $HOME/letsencrypt.yaml
    register: result
    retries: 5
    delay: 30
    until: result.rc == 0
    ignore_errors: yes

  - name: Installing OpenEBS
    shell: kubectl apply -f {{OPENEBES_URL}}
    environment: "{{ proxy_env }}"
    ignore_errors: yes

  - name: Patching OpenEBS to be the default storage class
    shell: |
     kubectl patch storageclass openebs-hostpath -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
    args:
      executable: /bin/bash
    register: result
    retries: 5
    delay: 20
    until: result.rc == 0
    ignore_errors: yes

  - name: Removing install files
    shell: rm -f get-docker.sh
    args:
      executable: /bin/bash

  
